#version: "2.7"

services:
  plnmonitordb:
    build: 
       context: .
       dockerfile: DockerfileDatabase
    ports:
       - "5432:5432"
    volumes: 
       - pln_dbdata:/var/lib/postgresql/data
    environment:
       POSTGRES_DB: plnmonitor
       POSTGRES_USER: plnmonitor
       POSTGRES_PASSWORD: plnmonitor
       PGDATA: /var/lib/postgresql/data/pgdata
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U plnmonitor"]
      interval: 20s
      timeout: 60s
      retries: 5
    networks:
      plnmonnetwork:
          aliases:
          - plnmonitordb

  plnmondaemon:
    build: 
       context: .
       dockerfile: DockerfileDaemon  
    links:
      - plnmonitordb
    depends_on:
       plnmonitordb:
          condition: service_healthy
    environment:
        WAIT_HOSTS: plnmonitordb:5432
    networks:
      - plnmonnetwork
    volumes:
      - ./template:/opt/template
      - ./provisioning:/opt/provisioning

  plnmonwebapp:
    build: 
       context: .
       dockerfile: DockerfileWebapp
    #ports:
    #   - "3000:3000"
    links:
      - plnmonitordb
    depends_on:
       plnmonitordb:
          condition: service_healthy
       traefik:
          condition: service_healthy
   
    environment:
        WAIT_HOSTS: plnmonitordb:5432
        GF_INSTALL_PLUGINS: grafana-worldmap-panel
        GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /etc/grafana/provisioning/dashboards/home.json
        USER: plnmonitor
        PASSWORD: plnmonitor
        #  Grafana URL (replace with yours)
        GF_SERVER_DOMAIN: yourdomain.org
        GF_SERVER_ROOT_URL: https://yourdomain.org
        GF_USERS_ALLOW_SIGN_UP: 'false'
        
    healthcheck:
        test: ["CMD", "wget", "http://localhost:3000/","--spider"]
        interval: 10s
        timeout: 5s
        retries: 3
        start_period: 5s

    labels:
      - "traefik.enable=true"
      # Grafana URL (replace with yours)
      - "traefik.http.routers.grafana.rule=Host(`yourdomain.org`)"
      - "traefik.http.routers.grafana.service=grafana"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.passhostheader=true"
      - "traefik.http.routers.grafan.middlewares=compresstraefik"
      - "traefik.http.middlewares.compresstraefik.compress=true"

    restart: unless-stopped
    
    volumes:
      - ./provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    networks:
      - plnmonnetwork
      - web


  traefik:
    # Image tag (replace with yours)
    image: traefik:2.4
    command:
      - "--log.level=WARN"
      - "--accesslog=true"
      - "--api.dashboard=false"
      - "--api.insecure=false"
      - "--ping=true"
      - "--ping.entrypoint=ping"
      - "--entryPoints.ping.address=:8082"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.docker.network=web"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # Email for Let's Encrypt (replace with yours)
      - "--certificatesresolvers.letsencrypt.acme.email=youremail@yourdomain.org"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--global.checkNewVersion=true"
      - "--global.sendAnonymousUsage=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
#      - traefik-certificates:/etc/traefik/acme
      - traefik-certificates:/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "http://localhost:8082/ping","--spider"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    #labels:
      #- "traefik.enable=true"
      # Traefik URL (replace with yours)
      #- "traefik.http.routers.dashboard.rule=Host(`traefik.dashboard.safepln.org`)"
      #- "traefik.http.routers.dashboard.service=api@internal"
      #- "traefik.http.routers.dashboard.entrypoints=websecure"
      #- "traefik.http.services.dashboard.loadbalancer.server.port=8080"
      #- "traefik.http.routers.dashboard.tls=true"
      #- "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      #- "traefik.http.services.dashboard.loadbalancer.passhostheader=true"
      #- "traefik.http.routers.dashboard.middlewares=authtraefik"
      # Basic Authentication for Traefik Dashboard
      # Username: traefikadmin (replace with yours)
      # Passwords must be encoded using MD5, SHA1, or BCrypt https://hostingcanada.org/htpasswd-generator/
      #- "traefik.http.middlewares.authtraefik.basicauth.users=traefikadmin:$$2y$$10$$sMzJfirKC75x/hVpiINeZOiSm.Jkity9cn4KwNkRvO7hSQVFc5FLO"
      #- "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      #- "traefik.http.routers.http-catchall.entrypoints=web"
      #- "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      #- "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    restart: unless-stopped
    networks:
      - web

  plnmonloki:
    build:
       context: .
       dockerfile: DockerfileLoki
    volumes:
      - ./loki:/etc/loki/
      - loki-chunks:/loki/chunks/
    ports:
      - "3100:3100"
      - "7946:7946"
    command: -config.file=/etc/loki/loki-config.yaml
    networks:
      - plnmonnetwork
    restart: always

  plnmonprometheus:
    build: 
       context: .
       dockerfile: DockerfilePrometheus
    ports:
      - 9000:9090
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml
    networks:
      - plnmonnetwork
    restart: always
      
volumes: 
  pln_dbdata:
  traefik-certificates:
  grafana-data:
  loki-chunks:
  prometheus-data:

networks:
  plnmonnetwork:
    driver: bridge
  web:
    driver: bridge
    external: true
